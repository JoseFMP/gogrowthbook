/*
GrowthBook REST API

GrowthBook offers a full REST API for interacting with the GrowthBook application. This is currently in **beta** as we add more authenticated API routes and features.  Request data can use either JSON or Form data encoding (with proper `Content-Type` headers). All response bodies are JSON-encoded.  The API base URL for GrowthBook Cloud is `https://api.growthbook.io`. For self-hosted deployments, it is the same as your API_HOST environment variable (defaults to `http://localhost:3100`). The rest of these docs will assume you are using GrowthBook Cloud.  ## Authentication  We support both the HTTP Basic and Bearer authentication schemes for convenience.  You first need to generate a new API Key in GrowthBook. Different keys have different permissions:  - **Personal Access Tokens**: These are sensitive and provide the same level of access as the user has to an organization. These can be created by going to `Personal Access Tokens` under the your user menu. - **Secret Keys**: These are sensitive and provide the level of access for the role, which currently is either `admin` or `readonly`. Only Admins with the `manageApiKeys` permission can manage Secret Keys on behalf of an organization. These can be created by going to `Settings -> API Keys`  If using HTTP Basic auth, pass the Secret Key as the username and leave the password blank:  ```bash curl https://api.growthbook.io/api/v1 \\   -u secret_abc123DEF456: # The \":\" at the end stops curl from asking for a password ```  If using Bearer auth, pass the Secret Key as the token:  ```bash curl https://api.growthbook.io/api/v1 \\ -H \"Authorization: Bearer secret_abc123DEF456\" ```  ## Errors  The API may return the following error status codes:  - **400** - Bad Request - Often due to a missing required parameter - **401** - Unauthorized - No valid API key provided - **402** - Request Failed - The parameters are valid, but the request failed - **403** - Forbidden - Provided API key does not have the required access - **404** - Not Found - Unknown API route or requested resource - **429** - Too Many Requests - You exceeded the rate limit of 60 requests per minute. Try again later. - **5XX** - Server Error - Something went wrong on GrowthBook's end (these are rare)  The response body will be a JSON object with the following properties:  - **message** - Information about the error

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"github.com/JoseFMP/gogrowthbook/common"
)

// checks if the DataSource type satisfies the common.MappedNullable interface at compile time
var _ common.MappedNullable = &DataSource{}

// DataSource struct for DataSource
type DataSource struct {
	Id interface{} `json:"id"`
	DateCreated interface{} `json:"dateCreated"`
	DateUpdated interface{} `json:"dateUpdated"`
	Type interface{} `json:"type"`
	Name interface{} `json:"name"`
	Description interface{} `json:"description"`
	ProjectIds interface{} `json:"projectIds"`
	EventTracker interface{} `json:"eventTracker"`
	IdentifierTypes interface{} `json:"identifierTypes"`
	AssignmentQueries interface{} `json:"assignmentQueries"`
	IdentifierJoinQueries interface{} `json:"identifierJoinQueries"`
	MixpanelSettings *DataSourceMixpanelSettings `json:"mixpanelSettings,omitempty"`
}

type _DataSource DataSource

// NewDataSource instantiates a new DataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSource(id interface{}, dateCreated interface{}, dateUpdated interface{}, type_ interface{}, name interface{}, description interface{}, projectIds interface{}, eventTracker interface{}, identifierTypes interface{}, assignmentQueries interface{}, identifierJoinQueries interface{}) *DataSource {
	this := DataSource{}
	this.Id = id
	this.DateCreated = dateCreated
	this.DateUpdated = dateUpdated
	this.Type = type_
	this.Name = name
	this.Description = description
	this.ProjectIds = projectIds
	this.EventTracker = eventTracker
	this.IdentifierTypes = identifierTypes
	this.AssignmentQueries = assignmentQueries
	this.IdentifierJoinQueries = identifierJoinQueries
	return &this
}

// NewDataSourceWithDefaults instantiates a new DataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceWithDefaults() *DataSource {
	this := DataSource{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetIdOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataSource) SetId(v interface{}) {
	o.Id = v
}

// GetDateCreated returns the DateCreated field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetDateCreated() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetDateCreatedOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.DateCreated) {
		return nil, false
	}
	return &o.DateCreated, true
}

// SetDateCreated sets field value
func (o *DataSource) SetDateCreated(v interface{}) {
	o.DateCreated = v
}

// GetDateUpdated returns the DateUpdated field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetDateUpdated() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.DateUpdated
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetDateUpdatedOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.DateUpdated) {
		return nil, false
	}
	return &o.DateUpdated, true
}

// SetDateUpdated sets field value
func (o *DataSource) SetDateUpdated(v interface{}) {
	o.DateUpdated = v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetTypeOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DataSource) SetType(v interface{}) {
	o.Type = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetNameOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataSource) SetName(v interface{}) {
	o.Name = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetDescription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetDescriptionOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.Description) {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DataSource) SetDescription(v interface{}) {
	o.Description = v
}

// GetProjectIds returns the ProjectIds field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetProjectIds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetProjectIdsOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.ProjectIds) {
		return nil, false
	}
	return &o.ProjectIds, true
}

// SetProjectIds sets field value
func (o *DataSource) SetProjectIds(v interface{}) {
	o.ProjectIds = v
}

// GetEventTracker returns the EventTracker field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetEventTracker() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.EventTracker
}

// GetEventTrackerOk returns a tuple with the EventTracker field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetEventTrackerOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.EventTracker) {
		return nil, false
	}
	return &o.EventTracker, true
}

// SetEventTracker sets field value
func (o *DataSource) SetEventTracker(v interface{}) {
	o.EventTracker = v
}

// GetIdentifierTypes returns the IdentifierTypes field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetIdentifierTypes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.IdentifierTypes
}

// GetIdentifierTypesOk returns a tuple with the IdentifierTypes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetIdentifierTypesOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.IdentifierTypes) {
		return nil, false
	}
	return &o.IdentifierTypes, true
}

// SetIdentifierTypes sets field value
func (o *DataSource) SetIdentifierTypes(v interface{}) {
	o.IdentifierTypes = v
}

// GetAssignmentQueries returns the AssignmentQueries field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetAssignmentQueries() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.AssignmentQueries
}

// GetAssignmentQueriesOk returns a tuple with the AssignmentQueries field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetAssignmentQueriesOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.AssignmentQueries) {
		return nil, false
	}
	return &o.AssignmentQueries, true
}

// SetAssignmentQueries sets field value
func (o *DataSource) SetAssignmentQueries(v interface{}) {
	o.AssignmentQueries = v
}

// GetIdentifierJoinQueries returns the IdentifierJoinQueries field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DataSource) GetIdentifierJoinQueries() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.IdentifierJoinQueries
}

// GetIdentifierJoinQueriesOk returns a tuple with the IdentifierJoinQueries field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSource) GetIdentifierJoinQueriesOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.IdentifierJoinQueries) {
		return nil, false
	}
	return &o.IdentifierJoinQueries, true
}

// SetIdentifierJoinQueries sets field value
func (o *DataSource) SetIdentifierJoinQueries(v interface{}) {
	o.IdentifierJoinQueries = v
}

// GetMixpanelSettings returns the MixpanelSettings field value if set, zero value otherwise.
func (o *DataSource) GetMixpanelSettings() DataSourceMixpanelSettings {
	if o == nil || common.IsNil(o.MixpanelSettings) {
		var ret DataSourceMixpanelSettings
		return ret
	}
	return *o.MixpanelSettings
}

// GetMixpanelSettingsOk returns a tuple with the MixpanelSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetMixpanelSettingsOk() (*DataSourceMixpanelSettings, bool) {
	if o == nil || common.IsNil(o.MixpanelSettings) {
		return nil, false
	}
	return o.MixpanelSettings, true
}

// HasMixpanelSettings returns a boolean if a field has been set.
func (o *DataSource) HasMixpanelSettings() bool {
	if o != nil && !common.IsNil(o.MixpanelSettings) {
		return true
	}

	return false
}

// SetMixpanelSettings gets a reference to the given DataSourceMixpanelSettings and assigns it to the MixpanelSettings field.
func (o *DataSource) SetMixpanelSettings(v DataSourceMixpanelSettings) {
	o.MixpanelSettings = &v
}

func (o DataSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.DateUpdated != nil {
		toSerialize["dateUpdated"] = o.DateUpdated
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ProjectIds != nil {
		toSerialize["projectIds"] = o.ProjectIds
	}
	if o.EventTracker != nil {
		toSerialize["eventTracker"] = o.EventTracker
	}
	if o.IdentifierTypes != nil {
		toSerialize["identifierTypes"] = o.IdentifierTypes
	}
	if o.AssignmentQueries != nil {
		toSerialize["assignmentQueries"] = o.AssignmentQueries
	}
	if o.IdentifierJoinQueries != nil {
		toSerialize["identifierJoinQueries"] = o.IdentifierJoinQueries
	}
	if !common.IsNil(o.MixpanelSettings) {
		toSerialize["mixpanelSettings"] = o.MixpanelSettings
	}
	return toSerialize, nil
}

func (o *DataSource) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"dateCreated",
		"dateUpdated",
		"type",
		"name",
		"description",
		"projectIds",
		"eventTracker",
		"identifierTypes",
		"assignmentQueries",
		"identifierJoinQueries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataSource := _DataSource{}

	err = json.Unmarshal(bytes, &varDataSource)

	if err != nil {
		return err
	}

	*o = DataSource(varDataSource)

	return err
}

type NullableDataSource struct {
	value *DataSource
	isSet bool
}

func (v NullableDataSource) Get() *DataSource {
	return v.value
}

func (v *NullableDataSource) Set(val *DataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSource(val *DataSource) *NullableDataSource {
	return &NullableDataSource{value: val, isSet: true}
}

func (v NullableDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


