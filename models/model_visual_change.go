/*
GrowthBook REST API

GrowthBook offers a full REST API for interacting with the GrowthBook application. This is currently in **beta** as we add more authenticated API routes and features.  Request data can use either JSON or Form data encoding (with proper `Content-Type` headers). All response bodies are JSON-encoded.  The API base URL for GrowthBook Cloud is `https://api.growthbook.io`. For self-hosted deployments, it is the same as your API_HOST environment variable (defaults to `http://localhost:3100`). The rest of these docs will assume you are using GrowthBook Cloud.  ## Authentication  We support both the HTTP Basic and Bearer authentication schemes for convenience.  You first need to generate a new API Key in GrowthBook. Different keys have different permissions:  - **Personal Access Tokens**: These are sensitive and provide the same level of access as the user has to an organization. These can be created by going to `Personal Access Tokens` under the your user menu. - **Secret Keys**: These are sensitive and provide the level of access for the role, which currently is either `admin` or `readonly`. Only Admins with the `manageApiKeys` permission can manage Secret Keys on behalf of an organization. These can be created by going to `Settings -> API Keys`  If using HTTP Basic auth, pass the Secret Key as the username and leave the password blank:  ```bash curl https://api.growthbook.io/api/v1 \\   -u secret_abc123DEF456: # The \":\" at the end stops curl from asking for a password ```  If using Bearer auth, pass the Secret Key as the token:  ```bash curl https://api.growthbook.io/api/v1 \\ -H \"Authorization: Bearer secret_abc123DEF456\" ```  ## Errors  The API may return the following error status codes:  - **400** - Bad Request - Often due to a missing required parameter - **401** - Unauthorized - No valid API key provided - **402** - Request Failed - The parameters are valid, but the request failed - **403** - Forbidden - Provided API key does not have the required access - **404** - Not Found - Unknown API route or requested resource - **429** - Too Many Requests - You exceeded the rate limit of 60 requests per minute. Try again later. - **5XX** - Server Error - Something went wrong on GrowthBook's end (these are rare)  The response body will be a JSON object with the following properties:  - **message** - Information about the error 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
"github.com/JoseFMP/gogrowthbook/common"
)

// checks if the VisualChange type satisfies the common.MappedNullable interface at compile time
var _ common.MappedNullable = &VisualChange{}

// VisualChange struct for VisualChange
type VisualChange struct {
	Description *string `json:"description,omitempty"`
	Css *string `json:"css,omitempty"`
	Js *string `json:"js,omitempty"`
	Variation string `json:"variation"`
	DomMutations interface{} `json:"domMutations,omitempty"`
}

type _VisualChange VisualChange

// NewVisualChange instantiates a new VisualChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualChange(variation string) *VisualChange {
	this := VisualChange{}
	this.Variation = variation
	return &this
}

// NewVisualChangeWithDefaults instantiates a new VisualChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualChangeWithDefaults() *VisualChange {
	this := VisualChange{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VisualChange) GetDescription() string {
	if o == nil || common.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualChange) GetDescriptionOk() (*string, bool) {
	if o == nil || common.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VisualChange) HasDescription() bool {
	if o != nil && !common.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VisualChange) SetDescription(v string) {
	o.Description = &v
}

// GetCss returns the Css field value if set, zero value otherwise.
func (o *VisualChange) GetCss() string {
	if o == nil || common.IsNil(o.Css) {
		var ret string
		return ret
	}
	return *o.Css
}

// GetCssOk returns a tuple with the Css field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualChange) GetCssOk() (*string, bool) {
	if o == nil || common.IsNil(o.Css) {
		return nil, false
	}
	return o.Css, true
}

// HasCss returns a boolean if a field has been set.
func (o *VisualChange) HasCss() bool {
	if o != nil && !common.IsNil(o.Css) {
		return true
	}

	return false
}

// SetCss gets a reference to the given string and assigns it to the Css field.
func (o *VisualChange) SetCss(v string) {
	o.Css = &v
}

// GetJs returns the Js field value if set, zero value otherwise.
func (o *VisualChange) GetJs() string {
	if o == nil || common.IsNil(o.Js) {
		var ret string
		return ret
	}
	return *o.Js
}

// GetJsOk returns a tuple with the Js field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualChange) GetJsOk() (*string, bool) {
	if o == nil || common.IsNil(o.Js) {
		return nil, false
	}
	return o.Js, true
}

// HasJs returns a boolean if a field has been set.
func (o *VisualChange) HasJs() bool {
	if o != nil && !common.IsNil(o.Js) {
		return true
	}

	return false
}

// SetJs gets a reference to the given string and assigns it to the Js field.
func (o *VisualChange) SetJs(v string) {
	o.Js = &v
}

// GetVariation returns the Variation field value
func (o *VisualChange) GetVariation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Variation
}

// GetVariationOk returns a tuple with the Variation field value
// and a boolean to check if the value has been set.
func (o *VisualChange) GetVariationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Variation, true
}

// SetVariation sets field value
func (o *VisualChange) SetVariation(v string) {
	o.Variation = v
}

// GetDomMutations returns the DomMutations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VisualChange) GetDomMutations() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DomMutations
}

// GetDomMutationsOk returns a tuple with the DomMutations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VisualChange) GetDomMutationsOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.DomMutations) {
		return nil, false
	}
	return &o.DomMutations, true
}

// HasDomMutations returns a boolean if a field has been set.
func (o *VisualChange) HasDomMutations() bool {
	if o != nil && common.IsNil(o.DomMutations) {
		return true
	}

	return false
}

// SetDomMutations gets a reference to the given interface{} and assigns it to the DomMutations field.
func (o *VisualChange) SetDomMutations(v interface{}) {
	o.DomMutations = v
}

func (o VisualChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !common.IsNil(o.Css) {
		toSerialize["css"] = o.Css
	}
	if !common.IsNil(o.Js) {
		toSerialize["js"] = o.Js
	}
	toSerialize["variation"] = o.Variation
	if o.DomMutations != nil {
		toSerialize["domMutations"] = o.DomMutations
	}
	return toSerialize, nil
}

func (o *VisualChange) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"variation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVisualChange := _VisualChange{}

	err = json.Unmarshal(bytes, &varVisualChange)

	if err != nil {
		return err
	}

	*o = VisualChange(varVisualChange)

	return err
}

type NullableVisualChange struct {
	value *VisualChange
	isSet bool
}

func (v NullableVisualChange) Get() *VisualChange {
	return v.value
}

func (v *NullableVisualChange) Set(val *VisualChange) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualChange) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualChange(val *VisualChange) *NullableVisualChange {
	return &NullableVisualChange{value: val, isSet: true}
}

func (v NullableVisualChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


