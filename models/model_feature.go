/*
GrowthBook REST API

GrowthBook offers a full REST API for interacting with the GrowthBook application. This is currently in **beta** as we add more authenticated API routes and features.  Request data can use either JSON or Form data encoding (with proper `Content-Type` headers). All response bodies are JSON-encoded.  The API base URL for GrowthBook Cloud is `https://api.growthbook.io`. For self-hosted deployments, it is the same as your API_HOST environment variable (defaults to `http://localhost:3100`). The rest of these docs will assume you are using GrowthBook Cloud.  ## Authentication  We support both the HTTP Basic and Bearer authentication schemes for convenience.  You first need to generate a new API Key in GrowthBook. Different keys have different permissions:  - **Personal Access Tokens**: These are sensitive and provide the same level of access as the user has to an organization. These can be created by going to `Personal Access Tokens` under the your user menu. - **Secret Keys**: These are sensitive and provide the level of access for the role, which currently is either `admin` or `readonly`. Only Admins with the `manageApiKeys` permission can manage Secret Keys on behalf of an organization. These can be created by going to `Settings -> API Keys`  If using HTTP Basic auth, pass the Secret Key as the username and leave the password blank:  ```bash curl https://api.growthbook.io/api/v1 \\   -u secret_abc123DEF456: # The \":\" at the end stops curl from asking for a password ```  If using Bearer auth, pass the Secret Key as the token:  ```bash curl https://api.growthbook.io/api/v1 \\ -H \"Authorization: Bearer secret_abc123DEF456\" ```  ## Errors  The API may return the following error status codes:  - **400** - Bad Request - Often due to a missing required parameter - **401** - Unauthorized - No valid API key provided - **402** - Request Failed - The parameters are valid, but the request failed - **403** - Forbidden - Provided API key does not have the required access - **404** - Not Found - Unknown API route or requested resource - **429** - Too Many Requests - You exceeded the rate limit of 60 requests per minute. Try again later. - **5XX** - Server Error - Something went wrong on GrowthBook's end (these are rare)  The response body will be a JSON object with the following properties:  - **message** - Information about the error 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
	"fmt"
"github.com/JoseFMP/gogrowthbook/common"
)

// checks if the Feature type satisfies the common.MappedNullable interface at compile time
var _ common.MappedNullable = &Feature{}

// Feature struct for Feature
type Feature struct {
	Id string `json:"id"`
	DateCreated time.Time `json:"dateCreated"`
	DateUpdated time.Time `json:"dateUpdated"`
	Archived bool `json:"archived"`
	Description string `json:"description"`
	Owner string `json:"owner"`
	Project string `json:"project"`
	ValueType string `json:"valueType"`
	DefaultValue string `json:"defaultValue"`
	Tags []string `json:"tags"`
	Environments map[string]FeatureEnvironment `json:"environments"`
	Revision FeatureRevision `json:"revision"`
}

type _Feature Feature

// NewFeature instantiates a new Feature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeature(id string, dateCreated time.Time, dateUpdated time.Time, archived bool, description string, owner string, project string, valueType string, defaultValue string, tags []string, environments map[string]FeatureEnvironment, revision FeatureRevision) *Feature {
	this := Feature{}
	this.Id = id
	this.DateCreated = dateCreated
	this.DateUpdated = dateUpdated
	this.Archived = archived
	this.Description = description
	this.Owner = owner
	this.Project = project
	this.ValueType = valueType
	this.DefaultValue = defaultValue
	this.Tags = tags
	this.Environments = environments
	this.Revision = revision
	return &this
}

// NewFeatureWithDefaults instantiates a new Feature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureWithDefaults() *Feature {
	this := Feature{}
	return &this
}

// GetId returns the Id field value
func (o *Feature) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Feature) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Feature) SetId(v string) {
	o.Id = v
}

// GetDateCreated returns the DateCreated field value
func (o *Feature) GetDateCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value
// and a boolean to check if the value has been set.
func (o *Feature) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateCreated, true
}

// SetDateCreated sets field value
func (o *Feature) SetDateCreated(v time.Time) {
	o.DateCreated = v
}

// GetDateUpdated returns the DateUpdated field value
func (o *Feature) GetDateUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateUpdated
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value
// and a boolean to check if the value has been set.
func (o *Feature) GetDateUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateUpdated, true
}

// SetDateUpdated sets field value
func (o *Feature) SetDateUpdated(v time.Time) {
	o.DateUpdated = v
}

// GetArchived returns the Archived field value
func (o *Feature) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *Feature) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *Feature) SetArchived(v bool) {
	o.Archived = v
}

// GetDescription returns the Description field value
func (o *Feature) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Feature) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Feature) SetDescription(v string) {
	o.Description = v
}

// GetOwner returns the Owner field value
func (o *Feature) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *Feature) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *Feature) SetOwner(v string) {
	o.Owner = v
}

// GetProject returns the Project field value
func (o *Feature) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *Feature) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *Feature) SetProject(v string) {
	o.Project = v
}

// GetValueType returns the ValueType field value
func (o *Feature) GetValueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *Feature) GetValueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *Feature) SetValueType(v string) {
	o.ValueType = v
}

// GetDefaultValue returns the DefaultValue field value
func (o *Feature) GetDefaultValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value
// and a boolean to check if the value has been set.
func (o *Feature) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultValue, true
}

// SetDefaultValue sets field value
func (o *Feature) SetDefaultValue(v string) {
	o.DefaultValue = v
}

// GetTags returns the Tags field value
func (o *Feature) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Feature) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *Feature) SetTags(v []string) {
	o.Tags = v
}

// GetEnvironments returns the Environments field value
// If the value is explicit nil, the zero value for map[string]FeatureEnvironment will be returned
func (o *Feature) GetEnvironments() map[string]FeatureEnvironment {
	if o == nil {
		var ret map[string]FeatureEnvironment
		return ret
	}

	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Feature) GetEnvironmentsOk() (*map[string]FeatureEnvironment, bool) {
	if o == nil || common.IsNil(o.Environments) {
		return nil, false
	}
	return &o.Environments, true
}

// SetEnvironments sets field value
func (o *Feature) SetEnvironments(v map[string]FeatureEnvironment) {
	o.Environments = v
}

// GetRevision returns the Revision field value
func (o *Feature) GetRevision() FeatureRevision {
	if o == nil {
		var ret FeatureRevision
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *Feature) GetRevisionOk() (*FeatureRevision, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *Feature) SetRevision(v FeatureRevision) {
	o.Revision = v
}

func (o Feature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Feature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["dateCreated"] = o.DateCreated
	toSerialize["dateUpdated"] = o.DateUpdated
	toSerialize["archived"] = o.Archived
	toSerialize["description"] = o.Description
	toSerialize["owner"] = o.Owner
	toSerialize["project"] = o.Project
	toSerialize["valueType"] = o.ValueType
	toSerialize["defaultValue"] = o.DefaultValue
	toSerialize["tags"] = o.Tags
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	toSerialize["revision"] = o.Revision
	return toSerialize, nil
}

func (o *Feature) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"dateCreated",
		"dateUpdated",
		"archived",
		"description",
		"owner",
		"project",
		"valueType",
		"defaultValue",
		"tags",
		"environments",
		"revision",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeature := _Feature{}

	err = json.Unmarshal(bytes, &varFeature)

	if err != nil {
		return err
	}

	*o = Feature(varFeature)

	return err
}

type NullableFeature struct {
	value *Feature
	isSet bool
}

func (v NullableFeature) Get() *Feature {
	return v.value
}

func (v *NullableFeature) Set(val *Feature) {
	v.value = val
	v.isSet = true
}

func (v NullableFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeature(val *Feature) *NullableFeature {
	return &NullableFeature{value: val, isSet: true}
}

func (v NullableFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


