/*
GrowthBook REST API

GrowthBook offers a full REST API for interacting with the GrowthBook application. This is currently in **beta** as we add more authenticated API routes and features.  Request data can use either JSON or Form data encoding (with proper `Content-Type` headers). All response bodies are JSON-encoded.  The API base URL for GrowthBook Cloud is `https://api.growthbook.io`. For self-hosted deployments, it is the same as your API_HOST environment variable (defaults to `http://localhost:3100`). The rest of these docs will assume you are using GrowthBook Cloud.  ## Authentication  We support both the HTTP Basic and Bearer authentication schemes for convenience.  You first need to generate a new API Key in GrowthBook. Different keys have different permissions:  - **Personal Access Tokens**: These are sensitive and provide the same level of access as the user has to an organization. These can be created by going to `Personal Access Tokens` under the your user menu. - **Secret Keys**: These are sensitive and provide the level of access for the role, which currently is either `admin` or `readonly`. Only Admins with the `manageApiKeys` permission can manage Secret Keys on behalf of an organization. These can be created by going to `Settings -> API Keys`  If using HTTP Basic auth, pass the Secret Key as the username and leave the password blank:  ```bash curl https://api.growthbook.io/api/v1 \\   -u secret_abc123DEF456: # The \":\" at the end stops curl from asking for a password ```  If using Bearer auth, pass the Secret Key as the token:  ```bash curl https://api.growthbook.io/api/v1 \\ -H \"Authorization: Bearer secret_abc123DEF456\" ```  ## Errors  The API may return the following error status codes:  - **400** - Bad Request - Often due to a missing required parameter - **401** - Unauthorized - No valid API key provided - **402** - Request Failed - The parameters are valid, but the request failed - **403** - Forbidden - Provided API key does not have the required access - **404** - Not Found - Unknown API route or requested resource - **429** - Too Many Requests - You exceeded the rate limit of 60 requests per minute. Try again later. - **5XX** - Server Error - Something went wrong on GrowthBook's end (these are rare)  The response body will be a JSON object with the following properties:  - **message** - Information about the error

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package models

import (
	"encoding/json"
	"fmt"

	"github.com/JoseFMP/gogrowthbook/common"
)

// checks if the MetricSqlBuilder type satisfies the common.MappedNullable interface at compile time
var _ common.MappedNullable = &MetricSqlBuilder{}

// MetricSqlBuilder struct for MetricSqlBuilder
type MetricSqlBuilder struct {
	IdentifierTypeColumns []PostMetricRequestSqlBuilderIdentifierTypeColumnsInner `json:"identifierTypeColumns"`
	TableName             string                                                  `json:"tableName"`
	ValueColumnName       string                                                  `json:"valueColumnName"`
	TimestampColumnName   string                                                  `json:"timestampColumnName"`
	Conditions            []PostMetricRequestSqlBuilderConditionsInner            `json:"conditions"`
}

type _MetricSqlBuilder MetricSqlBuilder

// NewMetricSqlBuilder instantiates a new MetricSqlBuilder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricSqlBuilder(identifierTypeColumns []PostMetricRequestSqlBuilderIdentifierTypeColumnsInner, tableName string, valueColumnName string, timestampColumnName string, conditions []PostMetricRequestSqlBuilderConditionsInner) *MetricSqlBuilder {
	this := MetricSqlBuilder{}
	this.IdentifierTypeColumns = identifierTypeColumns
	this.TableName = tableName
	this.ValueColumnName = valueColumnName
	this.TimestampColumnName = timestampColumnName
	this.Conditions = conditions
	return &this
}

// NewMetricSqlBuilderWithDefaults instantiates a new MetricSqlBuilder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricSqlBuilderWithDefaults() *MetricSqlBuilder {
	this := MetricSqlBuilder{}
	return &this
}

// GetIdentifierTypeColumns returns the IdentifierTypeColumns field value
func (o *MetricSqlBuilder) GetIdentifierTypeColumns() []PostMetricRequestSqlBuilderIdentifierTypeColumnsInner {
	if o == nil {
		var ret []PostMetricRequestSqlBuilderIdentifierTypeColumnsInner
		return ret
	}

	return o.IdentifierTypeColumns
}

// GetIdentifierTypeColumnsOk returns a tuple with the IdentifierTypeColumns field value
// and a boolean to check if the value has been set.
func (o *MetricSqlBuilder) GetIdentifierTypeColumnsOk() ([]PostMetricRequestSqlBuilderIdentifierTypeColumnsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdentifierTypeColumns, true
}

// SetIdentifierTypeColumns sets field value
func (o *MetricSqlBuilder) SetIdentifierTypeColumns(v []PostMetricRequestSqlBuilderIdentifierTypeColumnsInner) {
	o.IdentifierTypeColumns = v
}

// GetTableName returns the TableName field value
func (o *MetricSqlBuilder) GetTableName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value
// and a boolean to check if the value has been set.
func (o *MetricSqlBuilder) GetTableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableName, true
}

// SetTableName sets field value
func (o *MetricSqlBuilder) SetTableName(v string) {
	o.TableName = v
}

// GetValueColumnName returns the ValueColumnName field value
func (o *MetricSqlBuilder) GetValueColumnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueColumnName
}

// GetValueColumnNameOk returns a tuple with the ValueColumnName field value
// and a boolean to check if the value has been set.
func (o *MetricSqlBuilder) GetValueColumnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueColumnName, true
}

// SetValueColumnName sets field value
func (o *MetricSqlBuilder) SetValueColumnName(v string) {
	o.ValueColumnName = v
}

// GetTimestampColumnName returns the TimestampColumnName field value
func (o *MetricSqlBuilder) GetTimestampColumnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimestampColumnName
}

// GetTimestampColumnNameOk returns a tuple with the TimestampColumnName field value
// and a boolean to check if the value has been set.
func (o *MetricSqlBuilder) GetTimestampColumnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimestampColumnName, true
}

// SetTimestampColumnName sets field value
func (o *MetricSqlBuilder) SetTimestampColumnName(v string) {
	o.TimestampColumnName = v
}

// GetConditions returns the Conditions field value
func (o *MetricSqlBuilder) GetConditions() []PostMetricRequestSqlBuilderConditionsInner {
	if o == nil {
		var ret []PostMetricRequestSqlBuilderConditionsInner
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *MetricSqlBuilder) GetConditionsOk() ([]PostMetricRequestSqlBuilderConditionsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *MetricSqlBuilder) SetConditions(v []PostMetricRequestSqlBuilderConditionsInner) {
	o.Conditions = v
}

func (o MetricSqlBuilder) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricSqlBuilder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifierTypeColumns"] = o.IdentifierTypeColumns
	toSerialize["tableName"] = o.TableName
	toSerialize["valueColumnName"] = o.ValueColumnName
	toSerialize["timestampColumnName"] = o.TimestampColumnName
	toSerialize["conditions"] = o.Conditions
	return toSerialize, nil
}

func (o *MetricSqlBuilder) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifierTypeColumns",
		"tableName",
		"valueColumnName",
		"timestampColumnName",
		"conditions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricSqlBuilder := _MetricSqlBuilder{}

	err = json.Unmarshal(bytes, &varMetricSqlBuilder)

	if err != nil {
		return err
	}

	*o = MetricSqlBuilder(varMetricSqlBuilder)

	return err
}

type NullableMetricSqlBuilder struct {
	value *MetricSqlBuilder
	isSet bool
}

func (v NullableMetricSqlBuilder) Get() *MetricSqlBuilder {
	return v.value
}

func (v *NullableMetricSqlBuilder) Set(val *MetricSqlBuilder) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricSqlBuilder) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricSqlBuilder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricSqlBuilder(val *MetricSqlBuilder) *NullableMetricSqlBuilder {
	return &NullableMetricSqlBuilder{value: val, isSet: true}
}

func (v NullableMetricSqlBuilder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricSqlBuilder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
