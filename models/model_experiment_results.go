/*
GrowthBook REST API

GrowthBook offers a full REST API for interacting with the GrowthBook application. This is currently in **beta** as we add more authenticated API routes and features.  Request data can use either JSON or Form data encoding (with proper `Content-Type` headers). All response bodies are JSON-encoded.  The API base URL for GrowthBook Cloud is `https://api.growthbook.io`. For self-hosted deployments, it is the same as your API_HOST environment variable (defaults to `http://localhost:3100`). The rest of these docs will assume you are using GrowthBook Cloud.  ## Authentication  We support both the HTTP Basic and Bearer authentication schemes for convenience.  You first need to generate a new API Key in GrowthBook. Different keys have different permissions:  - **Personal Access Tokens**: These are sensitive and provide the same level of access as the user has to an organization. These can be created by going to `Personal Access Tokens` under the your user menu. - **Secret Keys**: These are sensitive and provide the level of access for the role, which currently is either `admin` or `readonly`. Only Admins with the `manageApiKeys` permission can manage Secret Keys on behalf of an organization. These can be created by going to `Settings -> API Keys`  If using HTTP Basic auth, pass the Secret Key as the username and leave the password blank:  ```bash curl https://api.growthbook.io/api/v1 \\   -u secret_abc123DEF456: # The \":\" at the end stops curl from asking for a password ```  If using Bearer auth, pass the Secret Key as the token:  ```bash curl https://api.growthbook.io/api/v1 \\ -H \"Authorization: Bearer secret_abc123DEF456\" ```  ## Errors  The API may return the following error status codes:  - **400** - Bad Request - Often due to a missing required parameter - **401** - Unauthorized - No valid API key provided - **402** - Request Failed - The parameters are valid, but the request failed - **403** - Forbidden - Provided API key does not have the required access - **404** - Not Found - Unknown API route or requested resource - **429** - Too Many Requests - You exceeded the rate limit of 60 requests per minute. Try again later. - **5XX** - Server Error - Something went wrong on GrowthBook's end (these are rare)  The response body will be a JSON object with the following properties:  - **message** - Information about the error

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package models

import (
	"encoding/json"
	"fmt"

	"github.com/JoseFMP/gogrowthbook/common"
)

// checks if the ExperimentResults type satisfies the common.MappedNullable interface at compile time
var _ common.MappedNullable = &ExperimentResults{}

// ExperimentResults struct for ExperimentResults
type ExperimentResults struct {
	Id           interface{}                `json:"id"`
	DateUpdated  interface{}                `json:"dateUpdated"`
	ExperimentId interface{}                `json:"experimentId"`
	Phase        interface{}                `json:"phase"`
	DateStart    interface{}                `json:"dateStart"`
	DateEnd      interface{}                `json:"dateEnd"`
	Dimension    ExperimentResultsDimension `json:"dimension"`
	Settings     ExperimentAnalysisSettings `json:"settings"`
	QueryIds     interface{}                `json:"queryIds"`
	Results      interface{}                `json:"results"`
}

type _ExperimentResults ExperimentResults

// NewExperimentResults instantiates a new ExperimentResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentResults(id interface{}, dateUpdated interface{}, experimentId interface{}, phase interface{}, dateStart interface{}, dateEnd interface{}, dimension ExperimentResultsDimension, settings ExperimentAnalysisSettings, queryIds interface{}, results interface{}) *ExperimentResults {
	this := ExperimentResults{}
	this.Id = id
	this.DateUpdated = dateUpdated
	this.ExperimentId = experimentId
	this.Phase = phase
	this.DateStart = dateStart
	this.DateEnd = dateEnd
	this.Dimension = dimension
	this.Settings = settings
	this.QueryIds = queryIds
	this.Results = results
	return &this
}

// NewExperimentResultsWithDefaults instantiates a new ExperimentResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentResultsWithDefaults() *ExperimentResults {
	this := ExperimentResults{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExperimentResults) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperimentResults) GetIdOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExperimentResults) SetId(v interface{}) {
	o.Id = v
}

// GetDateUpdated returns the DateUpdated field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExperimentResults) GetDateUpdated() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.DateUpdated
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperimentResults) GetDateUpdatedOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.DateUpdated) {
		return nil, false
	}
	return &o.DateUpdated, true
}

// SetDateUpdated sets field value
func (o *ExperimentResults) SetDateUpdated(v interface{}) {
	o.DateUpdated = v
}

// GetExperimentId returns the ExperimentId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExperimentResults) GetExperimentId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ExperimentId
}

// GetExperimentIdOk returns a tuple with the ExperimentId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperimentResults) GetExperimentIdOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.ExperimentId) {
		return nil, false
	}
	return &o.ExperimentId, true
}

// SetExperimentId sets field value
func (o *ExperimentResults) SetExperimentId(v interface{}) {
	o.ExperimentId = v
}

// GetPhase returns the Phase field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExperimentResults) GetPhase() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperimentResults) GetPhaseOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.Phase) {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *ExperimentResults) SetPhase(v interface{}) {
	o.Phase = v
}

// GetDateStart returns the DateStart field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExperimentResults) GetDateStart() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.DateStart
}

// GetDateStartOk returns a tuple with the DateStart field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperimentResults) GetDateStartOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.DateStart) {
		return nil, false
	}
	return &o.DateStart, true
}

// SetDateStart sets field value
func (o *ExperimentResults) SetDateStart(v interface{}) {
	o.DateStart = v
}

// GetDateEnd returns the DateEnd field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExperimentResults) GetDateEnd() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.DateEnd
}

// GetDateEndOk returns a tuple with the DateEnd field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperimentResults) GetDateEndOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.DateEnd) {
		return nil, false
	}
	return &o.DateEnd, true
}

// SetDateEnd sets field value
func (o *ExperimentResults) SetDateEnd(v interface{}) {
	o.DateEnd = v
}

// GetDimension returns the Dimension field value
func (o *ExperimentResults) GetDimension() ExperimentResultsDimension {
	if o == nil {
		var ret ExperimentResultsDimension
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *ExperimentResults) GetDimensionOk() (*ExperimentResultsDimension, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *ExperimentResults) SetDimension(v ExperimentResultsDimension) {
	o.Dimension = v
}

// GetSettings returns the Settings field value
func (o *ExperimentResults) GetSettings() ExperimentAnalysisSettings {
	if o == nil {
		var ret ExperimentAnalysisSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *ExperimentResults) GetSettingsOk() (*ExperimentAnalysisSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *ExperimentResults) SetSettings(v ExperimentAnalysisSettings) {
	o.Settings = v
}

// GetQueryIds returns the QueryIds field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExperimentResults) GetQueryIds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.QueryIds
}

// GetQueryIdsOk returns a tuple with the QueryIds field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperimentResults) GetQueryIdsOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.QueryIds) {
		return nil, false
	}
	return &o.QueryIds, true
}

// SetQueryIds sets field value
func (o *ExperimentResults) SetQueryIds(v interface{}) {
	o.QueryIds = v
}

// GetResults returns the Results field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExperimentResults) GetResults() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperimentResults) GetResultsOk() (*interface{}, bool) {
	if o == nil || common.IsNil(o.Results) {
		return nil, false
	}
	return &o.Results, true
}

// SetResults sets field value
func (o *ExperimentResults) SetResults(v interface{}) {
	o.Results = v
}

func (o ExperimentResults) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExperimentResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DateUpdated != nil {
		toSerialize["dateUpdated"] = o.DateUpdated
	}
	if o.ExperimentId != nil {
		toSerialize["experimentId"] = o.ExperimentId
	}
	if o.Phase != nil {
		toSerialize["phase"] = o.Phase
	}
	if o.DateStart != nil {
		toSerialize["dateStart"] = o.DateStart
	}
	if o.DateEnd != nil {
		toSerialize["dateEnd"] = o.DateEnd
	}
	toSerialize["dimension"] = o.Dimension
	toSerialize["settings"] = o.Settings
	if o.QueryIds != nil {
		toSerialize["queryIds"] = o.QueryIds
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

func (o *ExperimentResults) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"dateUpdated",
		"experimentId",
		"phase",
		"dateStart",
		"dateEnd",
		"dimension",
		"settings",
		"queryIds",
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExperimentResults := _ExperimentResults{}

	err = json.Unmarshal(bytes, &varExperimentResults)

	if err != nil {
		return err
	}

	*o = ExperimentResults(varExperimentResults)

	return err
}

type NullableExperimentResults struct {
	value *ExperimentResults
	isSet bool
}

func (v NullableExperimentResults) Get() *ExperimentResults {
	return v.value
}

func (v *NullableExperimentResults) Set(val *ExperimentResults) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentResults) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentResults(val *ExperimentResults) *NullableExperimentResults {
	return &NullableExperimentResults{value: val, isSet: true}
}

func (v NullableExperimentResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
