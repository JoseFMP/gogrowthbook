/*
GrowthBook REST API

GrowthBook offers a full REST API for interacting with the GrowthBook application. This is currently in **beta** as we add more authenticated API routes and features.  Request data can use either JSON or Form data encoding (with proper `Content-Type` headers). All response bodies are JSON-encoded.  The API base URL for GrowthBook Cloud is `https://api.growthbook.io`. For self-hosted deployments, it is the same as your API_HOST environment variable (defaults to `http://localhost:3100`). The rest of these docs will assume you are using GrowthBook Cloud.  ## Authentication  We support both the HTTP Basic and Bearer authentication schemes for convenience.  You first need to generate a new API Key in GrowthBook. Different keys have different permissions:  - **Personal Access Tokens**: These are sensitive and provide the same level of access as the user has to an organization. These can be created by going to `Personal Access Tokens` under the your user menu. - **Secret Keys**: These are sensitive and provide the level of access for the role, which currently is either `admin` or `readonly`. Only Admins with the `manageApiKeys` permission can manage Secret Keys on behalf of an organization. These can be created by going to `Settings -> API Keys`  If using HTTP Basic auth, pass the Secret Key as the username and leave the password blank:  ```bash curl https://api.growthbook.io/api/v1 \\   -u secret_abc123DEF456: # The \":\" at the end stops curl from asking for a password ```  If using Bearer auth, pass the Secret Key as the token:  ```bash curl https://api.growthbook.io/api/v1 \\ -H \"Authorization: Bearer secret_abc123DEF456\" ```  ## Errors  The API may return the following error status codes:  - **400** - Bad Request - Often due to a missing required parameter - **401** - Unauthorized - No valid API key provided - **402** - Request Failed - The parameters are valid, but the request failed - **403** - Forbidden - Provided API key does not have the required access - **404** - Not Found - Unknown API route or requested resource - **429** - Too Many Requests - You exceeded the rate limit of 60 requests per minute. Try again later. - **5XX** - Server Error - Something went wrong on GrowthBook's end (these are rare)  The response body will be a JSON object with the following properties:  - **message** - Information about the error

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package models

import (
	"encoding/json"
	"fmt"

	"github.com/JoseFMP/gogrowthbook/common"
)

// checks if the PostMetricRequest type satisfies the common.MappedNullable interface at compile time
var _ common.MappedNullable = &PostMetricRequest{}

// PostMetricRequest struct for PostMetricRequest
type PostMetricRequest struct {
	// ID for the [DataSource](#tag/DataSource_model)
	DatasourceId string `json:"datasourceId"`
	// Name of the person who owns this metric
	Owner *string `json:"owner,omitempty"`
	// Name of the metric
	Name string `json:"name"`
	// Description of the metric
	Description *string `json:"description,omitempty"`
	// Type of metric. See [Metrics documentation](/app/metrics)
	Type       string                       `json:"type"`
	Tags       []string                     `json:"tags,omitempty"`
	Projects   []string                     `json:"projects,omitempty"`
	Archived   *bool                        `json:"archived,omitempty"`
	Behavior   *PostMetricRequestBehavior   `json:"behavior,omitempty"`
	Sql        *PostMetricRequestSql        `json:"sql,omitempty"`
	SqlBuilder *PostMetricRequestSqlBuilder `json:"sqlBuilder,omitempty"`
	Mixpanel   *PostMetricRequestMixpanel   `json:"mixpanel,omitempty"`
}

type _PostMetricRequest PostMetricRequest

// NewPostMetricRequest instantiates a new PostMetricRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostMetricRequest(datasourceId string, name string, type_ string) *PostMetricRequest {
	this := PostMetricRequest{}
	this.DatasourceId = datasourceId
	this.Name = name
	this.Type = type_
	return &this
}

// NewPostMetricRequestWithDefaults instantiates a new PostMetricRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostMetricRequestWithDefaults() *PostMetricRequest {
	this := PostMetricRequest{}
	return &this
}

// GetDatasourceId returns the DatasourceId field value
func (o *PostMetricRequest) GetDatasourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatasourceId
}

// GetDatasourceIdOk returns a tuple with the DatasourceId field value
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetDatasourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatasourceId, true
}

// SetDatasourceId sets field value
func (o *PostMetricRequest) SetDatasourceId(v string) {
	o.DatasourceId = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *PostMetricRequest) GetOwner() string {
	if o == nil || common.IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetOwnerOk() (*string, bool) {
	if o == nil || common.IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *PostMetricRequest) HasOwner() bool {
	if o != nil && !common.IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *PostMetricRequest) SetOwner(v string) {
	o.Owner = &v
}

// GetName returns the Name field value
func (o *PostMetricRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PostMetricRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PostMetricRequest) GetDescription() string {
	if o == nil || common.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || common.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PostMetricRequest) HasDescription() bool {
	if o != nil && !common.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PostMetricRequest) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *PostMetricRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PostMetricRequest) SetType(v string) {
	o.Type = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PostMetricRequest) GetTags() []string {
	if o == nil || common.IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetTagsOk() ([]string, bool) {
	if o == nil || common.IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PostMetricRequest) HasTags() bool {
	if o != nil && !common.IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PostMetricRequest) SetTags(v []string) {
	o.Tags = v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *PostMetricRequest) GetProjects() []string {
	if o == nil || common.IsNil(o.Projects) {
		var ret []string
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetProjectsOk() ([]string, bool) {
	if o == nil || common.IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *PostMetricRequest) HasProjects() bool {
	if o != nil && !common.IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []string and assigns it to the Projects field.
func (o *PostMetricRequest) SetProjects(v []string) {
	o.Projects = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *PostMetricRequest) GetArchived() bool {
	if o == nil || common.IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetArchivedOk() (*bool, bool) {
	if o == nil || common.IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *PostMetricRequest) HasArchived() bool {
	if o != nil && !common.IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *PostMetricRequest) SetArchived(v bool) {
	o.Archived = &v
}

// GetBehavior returns the Behavior field value if set, zero value otherwise.
func (o *PostMetricRequest) GetBehavior() PostMetricRequestBehavior {
	if o == nil || common.IsNil(o.Behavior) {
		var ret PostMetricRequestBehavior
		return ret
	}
	return *o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetBehaviorOk() (*PostMetricRequestBehavior, bool) {
	if o == nil || common.IsNil(o.Behavior) {
		return nil, false
	}
	return o.Behavior, true
}

// HasBehavior returns a boolean if a field has been set.
func (o *PostMetricRequest) HasBehavior() bool {
	if o != nil && !common.IsNil(o.Behavior) {
		return true
	}

	return false
}

// SetBehavior gets a reference to the given PostMetricRequestBehavior and assigns it to the Behavior field.
func (o *PostMetricRequest) SetBehavior(v PostMetricRequestBehavior) {
	o.Behavior = &v
}

// GetSql returns the Sql field value if set, zero value otherwise.
func (o *PostMetricRequest) GetSql() PostMetricRequestSql {
	if o == nil || common.IsNil(o.Sql) {
		var ret PostMetricRequestSql
		return ret
	}
	return *o.Sql
}

// GetSqlOk returns a tuple with the Sql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetSqlOk() (*PostMetricRequestSql, bool) {
	if o == nil || common.IsNil(o.Sql) {
		return nil, false
	}
	return o.Sql, true
}

// HasSql returns a boolean if a field has been set.
func (o *PostMetricRequest) HasSql() bool {
	if o != nil && !common.IsNil(o.Sql) {
		return true
	}

	return false
}

// SetSql gets a reference to the given PostMetricRequestSql and assigns it to the Sql field.
func (o *PostMetricRequest) SetSql(v PostMetricRequestSql) {
	o.Sql = &v
}

// GetSqlBuilder returns the SqlBuilder field value if set, zero value otherwise.
func (o *PostMetricRequest) GetSqlBuilder() PostMetricRequestSqlBuilder {
	if o == nil || common.IsNil(o.SqlBuilder) {
		var ret PostMetricRequestSqlBuilder
		return ret
	}
	return *o.SqlBuilder
}

// GetSqlBuilderOk returns a tuple with the SqlBuilder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetSqlBuilderOk() (*PostMetricRequestSqlBuilder, bool) {
	if o == nil || common.IsNil(o.SqlBuilder) {
		return nil, false
	}
	return o.SqlBuilder, true
}

// HasSqlBuilder returns a boolean if a field has been set.
func (o *PostMetricRequest) HasSqlBuilder() bool {
	if o != nil && !common.IsNil(o.SqlBuilder) {
		return true
	}

	return false
}

// SetSqlBuilder gets a reference to the given PostMetricRequestSqlBuilder and assigns it to the SqlBuilder field.
func (o *PostMetricRequest) SetSqlBuilder(v PostMetricRequestSqlBuilder) {
	o.SqlBuilder = &v
}

// GetMixpanel returns the Mixpanel field value if set, zero value otherwise.
func (o *PostMetricRequest) GetMixpanel() PostMetricRequestMixpanel {
	if o == nil || common.IsNil(o.Mixpanel) {
		var ret PostMetricRequestMixpanel
		return ret
	}
	return *o.Mixpanel
}

// GetMixpanelOk returns a tuple with the Mixpanel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMetricRequest) GetMixpanelOk() (*PostMetricRequestMixpanel, bool) {
	if o == nil || common.IsNil(o.Mixpanel) {
		return nil, false
	}
	return o.Mixpanel, true
}

// HasMixpanel returns a boolean if a field has been set.
func (o *PostMetricRequest) HasMixpanel() bool {
	if o != nil && !common.IsNil(o.Mixpanel) {
		return true
	}

	return false
}

// SetMixpanel gets a reference to the given PostMetricRequestMixpanel and assigns it to the Mixpanel field.
func (o *PostMetricRequest) SetMixpanel(v PostMetricRequestMixpanel) {
	o.Mixpanel = &v
}

func (o PostMetricRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostMetricRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datasourceId"] = o.DatasourceId
	if !common.IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	toSerialize["name"] = o.Name
	if !common.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	if !common.IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !common.IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !common.IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !common.IsNil(o.Behavior) {
		toSerialize["behavior"] = o.Behavior
	}
	if !common.IsNil(o.Sql) {
		toSerialize["sql"] = o.Sql
	}
	if !common.IsNil(o.SqlBuilder) {
		toSerialize["sqlBuilder"] = o.SqlBuilder
	}
	if !common.IsNil(o.Mixpanel) {
		toSerialize["mixpanel"] = o.Mixpanel
	}
	return toSerialize, nil
}

func (o *PostMetricRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datasourceId",
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostMetricRequest := _PostMetricRequest{}

	err = json.Unmarshal(bytes, &varPostMetricRequest)

	if err != nil {
		return err
	}

	*o = PostMetricRequest(varPostMetricRequest)

	return err
}

type NullablePostMetricRequest struct {
	value *PostMetricRequest
	isSet bool
}

func (v NullablePostMetricRequest) Get() *PostMetricRequest {
	return v.value
}

func (v *NullablePostMetricRequest) Set(val *PostMetricRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostMetricRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostMetricRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostMetricRequest(val *PostMetricRequest) *NullablePostMetricRequest {
	return &NullablePostMetricRequest{value: val, isSet: true}
}

func (v NullablePostMetricRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostMetricRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
