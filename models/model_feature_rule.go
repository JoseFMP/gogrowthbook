/*
GrowthBook REST API

GrowthBook offers a full REST API for interacting with the GrowthBook application. This is currently in **beta** as we add more authenticated API routes and features.  Request data can use either JSON or Form data encoding (with proper `Content-Type` headers). All response bodies are JSON-encoded.  The API base URL for GrowthBook Cloud is `https://api.growthbook.io`. For self-hosted deployments, it is the same as your API_HOST environment variable (defaults to `http://localhost:3100`). The rest of these docs will assume you are using GrowthBook Cloud.  ## Authentication  We support both the HTTP Basic and Bearer authentication schemes for convenience.  You first need to generate a new API Key in GrowthBook. Different keys have different permissions:  - **Personal Access Tokens**: These are sensitive and provide the same level of access as the user has to an organization. These can be created by going to `Personal Access Tokens` under the your user menu. - **Secret Keys**: These are sensitive and provide the level of access for the role, which currently is either `admin` or `readonly`. Only Admins with the `manageApiKeys` permission can manage Secret Keys on behalf of an organization. These can be created by going to `Settings -> API Keys`  If using HTTP Basic auth, pass the Secret Key as the username and leave the password blank:  ```bash curl https://api.growthbook.io/api/v1 \\   -u secret_abc123DEF456: # The \":\" at the end stops curl from asking for a password ```  If using Bearer auth, pass the Secret Key as the token:  ```bash curl https://api.growthbook.io/api/v1 \\ -H \"Authorization: Bearer secret_abc123DEF456\" ```  ## Errors  The API may return the following error status codes:  - **400** - Bad Request - Often due to a missing required parameter - **401** - Unauthorized - No valid API key provided - **402** - Request Failed - The parameters are valid, but the request failed - **403** - Forbidden - Provided API key does not have the required access - **404** - Not Found - Unknown API route or requested resource - **429** - Too Many Requests - You exceeded the rate limit of 60 requests per minute. Try again later. - **5XX** - Server Error - Something went wrong on GrowthBook's end (these are rare)  The response body will be a JSON object with the following properties:  - **message** - Information about the error 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// FeatureRule struct for FeatureRule
type FeatureRule struct {
	FeatureExperimentRefRule *FeatureExperimentRefRule
	FeatureExperimentRule *FeatureExperimentRule
	FeatureForceRule *FeatureForceRule
	FeatureRolloutRule *FeatureRolloutRule
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *FeatureRule) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into FeatureExperimentRefRule
	err = json.Unmarshal(data, &dst.FeatureExperimentRefRule);
	if err == nil {
		jsonFeatureExperimentRefRule, _ := json.Marshal(dst.FeatureExperimentRefRule)
		if string(jsonFeatureExperimentRefRule) == "{}" { // empty struct
			dst.FeatureExperimentRefRule = nil
		} else {
			return nil // data stored in dst.FeatureExperimentRefRule, return on the first match
		}
	} else {
		dst.FeatureExperimentRefRule = nil
	}

	// try to unmarshal JSON data into FeatureExperimentRule
	err = json.Unmarshal(data, &dst.FeatureExperimentRule);
	if err == nil {
		jsonFeatureExperimentRule, _ := json.Marshal(dst.FeatureExperimentRule)
		if string(jsonFeatureExperimentRule) == "{}" { // empty struct
			dst.FeatureExperimentRule = nil
		} else {
			return nil // data stored in dst.FeatureExperimentRule, return on the first match
		}
	} else {
		dst.FeatureExperimentRule = nil
	}

	// try to unmarshal JSON data into FeatureForceRule
	err = json.Unmarshal(data, &dst.FeatureForceRule);
	if err == nil {
		jsonFeatureForceRule, _ := json.Marshal(dst.FeatureForceRule)
		if string(jsonFeatureForceRule) == "{}" { // empty struct
			dst.FeatureForceRule = nil
		} else {
			return nil // data stored in dst.FeatureForceRule, return on the first match
		}
	} else {
		dst.FeatureForceRule = nil
	}

	// try to unmarshal JSON data into FeatureRolloutRule
	err = json.Unmarshal(data, &dst.FeatureRolloutRule);
	if err == nil {
		jsonFeatureRolloutRule, _ := json.Marshal(dst.FeatureRolloutRule)
		if string(jsonFeatureRolloutRule) == "{}" { // empty struct
			dst.FeatureRolloutRule = nil
		} else {
			return nil // data stored in dst.FeatureRolloutRule, return on the first match
		}
	} else {
		dst.FeatureRolloutRule = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(FeatureRule)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *FeatureRule) MarshalJSON() ([]byte, error) {
	if src.FeatureExperimentRefRule != nil {
		return json.Marshal(&src.FeatureExperimentRefRule)
	}

	if src.FeatureExperimentRule != nil {
		return json.Marshal(&src.FeatureExperimentRule)
	}

	if src.FeatureForceRule != nil {
		return json.Marshal(&src.FeatureForceRule)
	}

	if src.FeatureRolloutRule != nil {
		return json.Marshal(&src.FeatureRolloutRule)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableFeatureRule struct {
	value *FeatureRule
	isSet bool
}

func (v NullableFeatureRule) Get() *FeatureRule {
	return v.value
}

func (v *NullableFeatureRule) Set(val *FeatureRule) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureRule) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureRule(val *FeatureRule) *NullableFeatureRule {
	return &NullableFeatureRule{value: val, isSet: true}
}

func (v NullableFeatureRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type FeatureRuleType string
const FeatureRuleTypeForce = FeatureRuleType("force")

type SavedGroupTargeting string
const SavedGroupTargetingAll = SavedGroupTargeting("all")
const SavedGroupTargetingAny = SavedGroupTargeting("any")
const SavedGroupTargetingNone = SavedGroupTargeting("none")

type FeatureRuleSavedGroupTargeting struct {
  MatchType  SavedGroupTargeting `json:"matchType"`
  SaveGroups []string `json:"savedGroups"`
}
