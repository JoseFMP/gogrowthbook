/*
GrowthBook REST API

GrowthBook offers a full REST API for interacting with the GrowthBook application. This is currently in **beta** as we add more authenticated API routes and features.  Request data can use either JSON or Form data encoding (with proper `Content-Type` headers). All response bodies are JSON-encoded.  The API base URL for GrowthBook Cloud is `https://api.growthbook.io`. For self-hosted deployments, it is the same as your API_HOST environment variable (defaults to `http://localhost:3100`). The rest of these docs will assume you are using GrowthBook Cloud.  ## Authentication  We support both the HTTP Basic and Bearer authentication schemes for convenience.  You first need to generate a new API Key in GrowthBook. Different keys have different permissions:  - **Personal Access Tokens**: These are sensitive and provide the same level of access as the user has to an organization. These can be created by going to `Personal Access Tokens` under the your user menu. - **Secret Keys**: These are sensitive and provide the level of access for the role, which currently is either `admin` or `readonly`. Only Admins with the `manageApiKeys` permission can manage Secret Keys on behalf of an organization. These can be created by going to `Settings -> API Keys`  If using HTTP Basic auth, pass the Secret Key as the username and leave the password blank:  ```bash curl https://api.growthbook.io/api/v1 \\   -u secret_abc123DEF456: # The \":\" at the end stops curl from asking for a password ```  If using Bearer auth, pass the Secret Key as the token:  ```bash curl https://api.growthbook.io/api/v1 \\ -H \"Authorization: Bearer secret_abc123DEF456\" ```  ## Errors  The API may return the following error status codes:  - **400** - Bad Request - Often due to a missing required parameter - **401** - Unauthorized - No valid API key provided - **402** - Request Failed - The parameters are valid, but the request failed - **403** - Forbidden - Provided API key does not have the required access - **404** - Not Found - Unknown API route or requested resource - **429** - Too Many Requests - You exceeded the rate limit of 60 requests per minute. Try again later. - **5XX** - Server Error - Something went wrong on GrowthBook's end (these are rare)  The response body will be a JSON object with the following properties:  - **message** - Information about the error

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package models

import (
	"encoding/json"

	"github.com/JoseFMP/gogrowthbook/common"
)

// checks if the PutMetricRequestMixpanel type satisfies the common.MappedNullable interface at compile time
var _ common.MappedNullable = &PutMetricRequestMixpanel{}

// PutMetricRequestMixpanel Only use for MixPanel (non-SQL) Data Sources. Only one of `sql`, `sqlBuilder` or `mixpanel` allowed.
type PutMetricRequestMixpanel struct {
	EventName       *string                                    `json:"eventName,omitempty"`
	EventValue      *string                                    `json:"eventValue,omitempty"`
	UserAggregation *string                                    `json:"userAggregation,omitempty"`
	Conditions      []PostMetricRequestMixpanelConditionsInner `json:"conditions,omitempty"`
}

// NewPutMetricRequestMixpanel instantiates a new PutMetricRequestMixpanel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutMetricRequestMixpanel() *PutMetricRequestMixpanel {
	this := PutMetricRequestMixpanel{}
	return &this
}

// NewPutMetricRequestMixpanelWithDefaults instantiates a new PutMetricRequestMixpanel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutMetricRequestMixpanelWithDefaults() *PutMetricRequestMixpanel {
	this := PutMetricRequestMixpanel{}
	return &this
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *PutMetricRequestMixpanel) GetEventName() string {
	if o == nil || common.IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestMixpanel) GetEventNameOk() (*string, bool) {
	if o == nil || common.IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *PutMetricRequestMixpanel) HasEventName() bool {
	if o != nil && !common.IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *PutMetricRequestMixpanel) SetEventName(v string) {
	o.EventName = &v
}

// GetEventValue returns the EventValue field value if set, zero value otherwise.
func (o *PutMetricRequestMixpanel) GetEventValue() string {
	if o == nil || common.IsNil(o.EventValue) {
		var ret string
		return ret
	}
	return *o.EventValue
}

// GetEventValueOk returns a tuple with the EventValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestMixpanel) GetEventValueOk() (*string, bool) {
	if o == nil || common.IsNil(o.EventValue) {
		return nil, false
	}
	return o.EventValue, true
}

// HasEventValue returns a boolean if a field has been set.
func (o *PutMetricRequestMixpanel) HasEventValue() bool {
	if o != nil && !common.IsNil(o.EventValue) {
		return true
	}

	return false
}

// SetEventValue gets a reference to the given string and assigns it to the EventValue field.
func (o *PutMetricRequestMixpanel) SetEventValue(v string) {
	o.EventValue = &v
}

// GetUserAggregation returns the UserAggregation field value if set, zero value otherwise.
func (o *PutMetricRequestMixpanel) GetUserAggregation() string {
	if o == nil || common.IsNil(o.UserAggregation) {
		var ret string
		return ret
	}
	return *o.UserAggregation
}

// GetUserAggregationOk returns a tuple with the UserAggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestMixpanel) GetUserAggregationOk() (*string, bool) {
	if o == nil || common.IsNil(o.UserAggregation) {
		return nil, false
	}
	return o.UserAggregation, true
}

// HasUserAggregation returns a boolean if a field has been set.
func (o *PutMetricRequestMixpanel) HasUserAggregation() bool {
	if o != nil && !common.IsNil(o.UserAggregation) {
		return true
	}

	return false
}

// SetUserAggregation gets a reference to the given string and assigns it to the UserAggregation field.
func (o *PutMetricRequestMixpanel) SetUserAggregation(v string) {
	o.UserAggregation = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *PutMetricRequestMixpanel) GetConditions() []PostMetricRequestMixpanelConditionsInner {
	if o == nil || common.IsNil(o.Conditions) {
		var ret []PostMetricRequestMixpanelConditionsInner
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestMixpanel) GetConditionsOk() ([]PostMetricRequestMixpanelConditionsInner, bool) {
	if o == nil || common.IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *PutMetricRequestMixpanel) HasConditions() bool {
	if o != nil && !common.IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []PostMetricRequestMixpanelConditionsInner and assigns it to the Conditions field.
func (o *PutMetricRequestMixpanel) SetConditions(v []PostMetricRequestMixpanelConditionsInner) {
	o.Conditions = v
}

func (o PutMetricRequestMixpanel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutMetricRequestMixpanel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !common.IsNil(o.EventValue) {
		toSerialize["eventValue"] = o.EventValue
	}
	if !common.IsNil(o.UserAggregation) {
		toSerialize["userAggregation"] = o.UserAggregation
	}
	if !common.IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

type NullablePutMetricRequestMixpanel struct {
	value *PutMetricRequestMixpanel
	isSet bool
}

func (v NullablePutMetricRequestMixpanel) Get() *PutMetricRequestMixpanel {
	return v.value
}

func (v *NullablePutMetricRequestMixpanel) Set(val *PutMetricRequestMixpanel) {
	v.value = val
	v.isSet = true
}

func (v NullablePutMetricRequestMixpanel) IsSet() bool {
	return v.isSet
}

func (v *NullablePutMetricRequestMixpanel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutMetricRequestMixpanel(val *PutMetricRequestMixpanel) *NullablePutMetricRequestMixpanel {
	return &NullablePutMetricRequestMixpanel{value: val, isSet: true}
}

func (v NullablePutMetricRequestMixpanel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutMetricRequestMixpanel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
