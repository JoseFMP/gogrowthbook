/*
GrowthBook REST API

GrowthBook offers a full REST API for interacting with the GrowthBook application. This is currently in **beta** as we add more authenticated API routes and features.  Request data can use either JSON or Form data encoding (with proper `Content-Type` headers). All response bodies are JSON-encoded.  The API base URL for GrowthBook Cloud is `https://api.growthbook.io`. For self-hosted deployments, it is the same as your API_HOST environment variable (defaults to `http://localhost:3100`). The rest of these docs will assume you are using GrowthBook Cloud.  ## Authentication  We support both the HTTP Basic and Bearer authentication schemes for convenience.  You first need to generate a new API Key in GrowthBook. Different keys have different permissions:  - **Personal Access Tokens**: These are sensitive and provide the same level of access as the user has to an organization. These can be created by going to `Personal Access Tokens` under the your user menu. - **Secret Keys**: These are sensitive and provide the level of access for the role, which currently is either `admin` or `readonly`. Only Admins with the `manageApiKeys` permission can manage Secret Keys on behalf of an organization. These can be created by going to `Settings -> API Keys`  If using HTTP Basic auth, pass the Secret Key as the username and leave the password blank:  ```bash curl https://api.growthbook.io/api/v1 \\   -u secret_abc123DEF456: # The \":\" at the end stops curl from asking for a password ```  If using Bearer auth, pass the Secret Key as the token:  ```bash curl https://api.growthbook.io/api/v1 \\ -H \"Authorization: Bearer secret_abc123DEF456\" ```  ## Errors  The API may return the following error status codes:  - **400** - Bad Request - Often due to a missing required parameter - **401** - Unauthorized - No valid API key provided - **402** - Request Failed - The parameters are valid, but the request failed - **403** - Forbidden - Provided API key does not have the required access - **404** - Not Found - Unknown API route or requested resource - **429** - Too Many Requests - You exceeded the rate limit of 60 requests per minute. Try again later. - **5XX** - Server Error - Something went wrong on GrowthBook's end (these are rare)  The response body will be a JSON object with the following properties:  - **message** - Information about the error 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/JoseFMP/gogrowthbook/common"
)

// checks if the PutMetricRequestBehavior type satisfies the common.MappedNullable interface at compile time
var _ common.MappedNullable = &PutMetricRequestBehavior{}

// PutMetricRequestBehavior struct for PutMetricRequestBehavior
type PutMetricRequestBehavior struct {
	Goal *string `json:"goal,omitempty"`
	// Used in conjunction with `capValue` to set the capping (winsorization). Set to null to turn capping off. \"absolute\" will cap user values at the `capValue` if it is greater than 0. \"percentile\" will cap user values at the percentile of user values in an experiment using the `capValue` for the percentile, if greater than 0. <br/> If `behavior.capping` is non-null, you must specify `behavior.capValue`.
	Capping *string `json:"capping,omitempty"`
	// This should be non-negative. <br/> Must specify `behavior.capping` when setting `behavior.capValue`.
	CapValue *float32 `json:"capValue,omitempty"`
	// The start of a Conversion Window relative to the exposure date, in hours. This is equivalent to the [Conversion Delay](/app/metrics#conversion-delay). <br/> Must specify both `behavior.conversionWindowStart` and `behavior.conversionWindowEnd` or neither.
	ConversionWindowStart *float32 `json:"conversionWindowStart,omitempty"`
	// The end of a [Conversion Window](/app/metrics#conversion-window) relative to the exposure date, in hours. This is equivalent to the [Conversion Delay](/app/metrics#conversion-delay) + Conversion Window Hours settings in the UI. In other words, if you want a 48 hour window starting after 24 hours, you would set conversionWindowStart to 24 and conversionWindowEnd to 72 (24+48). <br/> Must specify both `behavior.conversionWindowStart` and `behavior.conversionWindowEnd` or neither.
	ConversionWindowEnd *float32 `json:"conversionWindowEnd,omitempty"`
	// Threshold for Risk to be considered low enough, as a proportion (e.g. put 0.0025 for 0.25%). <br/> Must be a non-negative number and must not be higher than `riskThresholdDanger`.
	RiskThresholdSuccess *float32 `json:"riskThresholdSuccess,omitempty"`
	// Threshold for Risk to be considered too high, as a proportion (e.g. put 0.0125 for 1.25%). <br/> Must be a non-negative number.
	RiskThresholdDanger *float32 `json:"riskThresholdDanger,omitempty"`
	// Minimum percent change to consider uplift significant, as a proportion (e.g. put 0.005 for 0.5%)
	MinPercentChange *float32 `json:"minPercentChange,omitempty"`
	// Maximum percent change to consider uplift significant, as a proportion (e.g. put 0.5 for 50%)
	MaxPercentChange *float32 `json:"maxPercentChange,omitempty"`
	MinSampleSize *float32 `json:"minSampleSize,omitempty"`
}

// NewPutMetricRequestBehavior instantiates a new PutMetricRequestBehavior object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutMetricRequestBehavior() *PutMetricRequestBehavior {
	this := PutMetricRequestBehavior{}
	return &this
}

// NewPutMetricRequestBehaviorWithDefaults instantiates a new PutMetricRequestBehavior object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutMetricRequestBehaviorWithDefaults() *PutMetricRequestBehavior {
	this := PutMetricRequestBehavior{}
	return &this
}

// GetGoal returns the Goal field value if set, zero value otherwise.
func (o *PutMetricRequestBehavior) GetGoal() string {
	if o == nil || common.IsNil(o.Goal) {
		var ret string
		return ret
	}
	return *o.Goal
}

// GetGoalOk returns a tuple with the Goal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestBehavior) GetGoalOk() (*string, bool) {
	if o == nil || common.IsNil(o.Goal) {
		return nil, false
	}
	return o.Goal, true
}

// HasGoal returns a boolean if a field has been set.
func (o *PutMetricRequestBehavior) HasGoal() bool {
	if o != nil && !common.IsNil(o.Goal) {
		return true
	}

	return false
}

// SetGoal gets a reference to the given string and assigns it to the Goal field.
func (o *PutMetricRequestBehavior) SetGoal(v string) {
	o.Goal = &v
}

// GetCapping returns the Capping field value if set, zero value otherwise.
func (o *PutMetricRequestBehavior) GetCapping() string {
	if o == nil || common.IsNil(o.Capping) {
		var ret string
		return ret
	}
	return *o.Capping
}

// GetCappingOk returns a tuple with the Capping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestBehavior) GetCappingOk() (*string, bool) {
	if o == nil || common.IsNil(o.Capping) {
		return nil, false
	}
	return o.Capping, true
}

// HasCapping returns a boolean if a field has been set.
func (o *PutMetricRequestBehavior) HasCapping() bool {
	if o != nil && !common.IsNil(o.Capping) {
		return true
	}

	return false
}

// SetCapping gets a reference to the given string and assigns it to the Capping field.
func (o *PutMetricRequestBehavior) SetCapping(v string) {
	o.Capping = &v
}

// GetCapValue returns the CapValue field value if set, zero value otherwise.
func (o *PutMetricRequestBehavior) GetCapValue() float32 {
	if o == nil || common.IsNil(o.CapValue) {
		var ret float32
		return ret
	}
	return *o.CapValue
}

// GetCapValueOk returns a tuple with the CapValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestBehavior) GetCapValueOk() (*float32, bool) {
	if o == nil || common.IsNil(o.CapValue) {
		return nil, false
	}
	return o.CapValue, true
}

// HasCapValue returns a boolean if a field has been set.
func (o *PutMetricRequestBehavior) HasCapValue() bool {
	if o != nil && !common.IsNil(o.CapValue) {
		return true
	}

	return false
}

// SetCapValue gets a reference to the given float32 and assigns it to the CapValue field.
func (o *PutMetricRequestBehavior) SetCapValue(v float32) {
	o.CapValue = &v
}

// GetConversionWindowStart returns the ConversionWindowStart field value if set, zero value otherwise.
func (o *PutMetricRequestBehavior) GetConversionWindowStart() float32 {
	if o == nil || common.IsNil(o.ConversionWindowStart) {
		var ret float32
		return ret
	}
	return *o.ConversionWindowStart
}

// GetConversionWindowStartOk returns a tuple with the ConversionWindowStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestBehavior) GetConversionWindowStartOk() (*float32, bool) {
	if o == nil || common.IsNil(o.ConversionWindowStart) {
		return nil, false
	}
	return o.ConversionWindowStart, true
}

// HasConversionWindowStart returns a boolean if a field has been set.
func (o *PutMetricRequestBehavior) HasConversionWindowStart() bool {
	if o != nil && !common.IsNil(o.ConversionWindowStart) {
		return true
	}

	return false
}

// SetConversionWindowStart gets a reference to the given float32 and assigns it to the ConversionWindowStart field.
func (o *PutMetricRequestBehavior) SetConversionWindowStart(v float32) {
	o.ConversionWindowStart = &v
}

// GetConversionWindowEnd returns the ConversionWindowEnd field value if set, zero value otherwise.
func (o *PutMetricRequestBehavior) GetConversionWindowEnd() float32 {
	if o == nil || common.IsNil(o.ConversionWindowEnd) {
		var ret float32
		return ret
	}
	return *o.ConversionWindowEnd
}

// GetConversionWindowEndOk returns a tuple with the ConversionWindowEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestBehavior) GetConversionWindowEndOk() (*float32, bool) {
	if o == nil || common.IsNil(o.ConversionWindowEnd) {
		return nil, false
	}
	return o.ConversionWindowEnd, true
}

// HasConversionWindowEnd returns a boolean if a field has been set.
func (o *PutMetricRequestBehavior) HasConversionWindowEnd() bool {
	if o != nil && !common.IsNil(o.ConversionWindowEnd) {
		return true
	}

	return false
}

// SetConversionWindowEnd gets a reference to the given float32 and assigns it to the ConversionWindowEnd field.
func (o *PutMetricRequestBehavior) SetConversionWindowEnd(v float32) {
	o.ConversionWindowEnd = &v
}

// GetRiskThresholdSuccess returns the RiskThresholdSuccess field value if set, zero value otherwise.
func (o *PutMetricRequestBehavior) GetRiskThresholdSuccess() float32 {
	if o == nil || common.IsNil(o.RiskThresholdSuccess) {
		var ret float32
		return ret
	}
	return *o.RiskThresholdSuccess
}

// GetRiskThresholdSuccessOk returns a tuple with the RiskThresholdSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestBehavior) GetRiskThresholdSuccessOk() (*float32, bool) {
	if o == nil || common.IsNil(o.RiskThresholdSuccess) {
		return nil, false
	}
	return o.RiskThresholdSuccess, true
}

// HasRiskThresholdSuccess returns a boolean if a field has been set.
func (o *PutMetricRequestBehavior) HasRiskThresholdSuccess() bool {
	if o != nil && !common.IsNil(o.RiskThresholdSuccess) {
		return true
	}

	return false
}

// SetRiskThresholdSuccess gets a reference to the given float32 and assigns it to the RiskThresholdSuccess field.
func (o *PutMetricRequestBehavior) SetRiskThresholdSuccess(v float32) {
	o.RiskThresholdSuccess = &v
}

// GetRiskThresholdDanger returns the RiskThresholdDanger field value if set, zero value otherwise.
func (o *PutMetricRequestBehavior) GetRiskThresholdDanger() float32 {
	if o == nil || common.IsNil(o.RiskThresholdDanger) {
		var ret float32
		return ret
	}
	return *o.RiskThresholdDanger
}

// GetRiskThresholdDangerOk returns a tuple with the RiskThresholdDanger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestBehavior) GetRiskThresholdDangerOk() (*float32, bool) {
	if o == nil || common.IsNil(o.RiskThresholdDanger) {
		return nil, false
	}
	return o.RiskThresholdDanger, true
}

// HasRiskThresholdDanger returns a boolean if a field has been set.
func (o *PutMetricRequestBehavior) HasRiskThresholdDanger() bool {
	if o != nil && !common.IsNil(o.RiskThresholdDanger) {
		return true
	}

	return false
}

// SetRiskThresholdDanger gets a reference to the given float32 and assigns it to the RiskThresholdDanger field.
func (o *PutMetricRequestBehavior) SetRiskThresholdDanger(v float32) {
	o.RiskThresholdDanger = &v
}

// GetMinPercentChange returns the MinPercentChange field value if set, zero value otherwise.
func (o *PutMetricRequestBehavior) GetMinPercentChange() float32 {
	if o == nil || common.IsNil(o.MinPercentChange) {
		var ret float32
		return ret
	}
	return *o.MinPercentChange
}

// GetMinPercentChangeOk returns a tuple with the MinPercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestBehavior) GetMinPercentChangeOk() (*float32, bool) {
	if o == nil || common.IsNil(o.MinPercentChange) {
		return nil, false
	}
	return o.MinPercentChange, true
}

// HasMinPercentChange returns a boolean if a field has been set.
func (o *PutMetricRequestBehavior) HasMinPercentChange() bool {
	if o != nil && !common.IsNil(o.MinPercentChange) {
		return true
	}

	return false
}

// SetMinPercentChange gets a reference to the given float32 and assigns it to the MinPercentChange field.
func (o *PutMetricRequestBehavior) SetMinPercentChange(v float32) {
	o.MinPercentChange = &v
}

// GetMaxPercentChange returns the MaxPercentChange field value if set, zero value otherwise.
func (o *PutMetricRequestBehavior) GetMaxPercentChange() float32 {
	if o == nil || common.IsNil(o.MaxPercentChange) {
		var ret float32
		return ret
	}
	return *o.MaxPercentChange
}

// GetMaxPercentChangeOk returns a tuple with the MaxPercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestBehavior) GetMaxPercentChangeOk() (*float32, bool) {
	if o == nil || common.IsNil(o.MaxPercentChange) {
		return nil, false
	}
	return o.MaxPercentChange, true
}

// HasMaxPercentChange returns a boolean if a field has been set.
func (o *PutMetricRequestBehavior) HasMaxPercentChange() bool {
	if o != nil && !common.IsNil(o.MaxPercentChange) {
		return true
	}

	return false
}

// SetMaxPercentChange gets a reference to the given float32 and assigns it to the MaxPercentChange field.
func (o *PutMetricRequestBehavior) SetMaxPercentChange(v float32) {
	o.MaxPercentChange = &v
}

// GetMinSampleSize returns the MinSampleSize field value if set, zero value otherwise.
func (o *PutMetricRequestBehavior) GetMinSampleSize() float32 {
	if o == nil || common.IsNil(o.MinSampleSize) {
		var ret float32
		return ret
	}
	return *o.MinSampleSize
}

// GetMinSampleSizeOk returns a tuple with the MinSampleSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutMetricRequestBehavior) GetMinSampleSizeOk() (*float32, bool) {
	if o == nil || common.IsNil(o.MinSampleSize) {
		return nil, false
	}
	return o.MinSampleSize, true
}

// HasMinSampleSize returns a boolean if a field has been set.
func (o *PutMetricRequestBehavior) HasMinSampleSize() bool {
	if o != nil && !common.IsNil(o.MinSampleSize) {
		return true
	}

	return false
}

// SetMinSampleSize gets a reference to the given float32 and assigns it to the MinSampleSize field.
func (o *PutMetricRequestBehavior) SetMinSampleSize(v float32) {
	o.MinSampleSize = &v
}

func (o PutMetricRequestBehavior) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutMetricRequestBehavior) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.Goal) {
		toSerialize["goal"] = o.Goal
	}
	if !common.IsNil(o.Capping) {
		toSerialize["capping"] = o.Capping
	}
	if !common.IsNil(o.CapValue) {
		toSerialize["capValue"] = o.CapValue
	}
	if !common.IsNil(o.ConversionWindowStart) {
		toSerialize["conversionWindowStart"] = o.ConversionWindowStart
	}
	if !common.IsNil(o.ConversionWindowEnd) {
		toSerialize["conversionWindowEnd"] = o.ConversionWindowEnd
	}
	if !common.IsNil(o.RiskThresholdSuccess) {
		toSerialize["riskThresholdSuccess"] = o.RiskThresholdSuccess
	}
	if !common.IsNil(o.RiskThresholdDanger) {
		toSerialize["riskThresholdDanger"] = o.RiskThresholdDanger
	}
	if !common.IsNil(o.MinPercentChange) {
		toSerialize["minPercentChange"] = o.MinPercentChange
	}
	if !common.IsNil(o.MaxPercentChange) {
		toSerialize["maxPercentChange"] = o.MaxPercentChange
	}
	if !common.IsNil(o.MinSampleSize) {
		toSerialize["minSampleSize"] = o.MinSampleSize
	}
	return toSerialize, nil
}

type NullablePutMetricRequestBehavior struct {
	value *PutMetricRequestBehavior
	isSet bool
}

func (v NullablePutMetricRequestBehavior) Get() *PutMetricRequestBehavior {
	return v.value
}

func (v *NullablePutMetricRequestBehavior) Set(val *PutMetricRequestBehavior) {
	v.value = val
	v.isSet = true
}

func (v NullablePutMetricRequestBehavior) IsSet() bool {
	return v.isSet
}

func (v *NullablePutMetricRequestBehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutMetricRequestBehavior(val *PutMetricRequestBehavior) *NullablePutMetricRequestBehavior {
	return &NullablePutMetricRequestBehavior{value: val, isSet: true}
}

func (v NullablePutMetricRequestBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutMetricRequestBehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


