/*
GrowthBook REST API

GrowthBook offers a full REST API for interacting with the GrowthBook application. This is currently in **beta** as we add more authenticated API routes and features.  Request data can use either JSON or Form data encoding (with proper `Content-Type` headers). All response bodies are JSON-encoded.  The API base URL for GrowthBook Cloud is `https://api.growthbook.io`. For self-hosted deployments, it is the same as your API_HOST environment variable (defaults to `http://localhost:3100`). The rest of these docs will assume you are using GrowthBook Cloud.  ## Authentication  We support both the HTTP Basic and Bearer authentication schemes for convenience.  You first need to generate a new API Key in GrowthBook. Different keys have different permissions:  - **Personal Access Tokens**: These are sensitive and provide the same level of access as the user has to an organization. These can be created by going to `Personal Access Tokens` under the your user menu. - **Secret Keys**: These are sensitive and provide the level of access for the role, which currently is either `admin` or `readonly`. Only Admins with the `manageApiKeys` permission can manage Secret Keys on behalf of an organization. These can be created by going to `Settings -> API Keys`  If using HTTP Basic auth, pass the Secret Key as the username and leave the password blank:  ```bash curl https://api.growthbook.io/api/v1 \\   -u secret_abc123DEF456: # The \":\" at the end stops curl from asking for a password ```  If using Bearer auth, pass the Secret Key as the token:  ```bash curl https://api.growthbook.io/api/v1 \\ -H \"Authorization: Bearer secret_abc123DEF456\" ```  ## Errors  The API may return the following error status codes:  - **400** - Bad Request - Often due to a missing required parameter - **401** - Unauthorized - No valid API key provided - **402** - Request Failed - The parameters are valid, but the request failed - **403** - Forbidden - Provided API key does not have the required access - **404** - Not Found - Unknown API route or requested resource - **429** - Too Many Requests - You exceeded the rate limit of 60 requests per minute. Try again later. - **5XX** - Server Error - Something went wrong on GrowthBook's end (these are rare)  The response body will be a JSON object with the following properties:  - **message** - Information about the error

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package models

import (
	"encoding/json"
	"fmt"

	"github.com/JoseFMP/gogrowthbook/common"
)

// checks if the MetricBehavior type satisfies the common.MappedNullable interface at compile time
var _ common.MappedNullable = &MetricBehavior{}

// MetricBehavior struct for MetricBehavior
type MetricBehavior struct {
	Goal                  string   `json:"goal"`
	Cap                   *float32 `json:"cap,omitempty"`
	Capping               *string  `json:"capping,omitempty"`
	CapValue              *float32 `json:"capValue,omitempty"`
	ConversionWindowStart float32  `json:"conversionWindowStart"`
	ConversionWindowEnd   float32  `json:"conversionWindowEnd"`
	RiskThresholdSuccess  float32  `json:"riskThresholdSuccess"`
	RiskThresholdDanger   float32  `json:"riskThresholdDanger"`
	MinPercentChange      float32  `json:"minPercentChange"`
	MaxPercentChange      float32  `json:"maxPercentChange"`
	MinSampleSize         float32  `json:"minSampleSize"`
}

type _MetricBehavior MetricBehavior

// NewMetricBehavior instantiates a new MetricBehavior object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricBehavior(goal string, conversionWindowStart float32, conversionWindowEnd float32, riskThresholdSuccess float32, riskThresholdDanger float32, minPercentChange float32, maxPercentChange float32, minSampleSize float32) *MetricBehavior {
	this := MetricBehavior{}
	this.Goal = goal
	this.ConversionWindowStart = conversionWindowStart
	this.ConversionWindowEnd = conversionWindowEnd
	this.RiskThresholdSuccess = riskThresholdSuccess
	this.RiskThresholdDanger = riskThresholdDanger
	this.MinPercentChange = minPercentChange
	this.MaxPercentChange = maxPercentChange
	this.MinSampleSize = minSampleSize
	return &this
}

// NewMetricBehaviorWithDefaults instantiates a new MetricBehavior object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricBehaviorWithDefaults() *MetricBehavior {
	this := MetricBehavior{}
	return &this
}

// GetGoal returns the Goal field value
func (o *MetricBehavior) GetGoal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Goal
}

// GetGoalOk returns a tuple with the Goal field value
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetGoalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Goal, true
}

// SetGoal sets field value
func (o *MetricBehavior) SetGoal(v string) {
	o.Goal = v
}

// GetCap returns the Cap field value if set, zero value otherwise.
func (o *MetricBehavior) GetCap() float32 {
	if o == nil || common.IsNil(o.Cap) {
		var ret float32
		return ret
	}
	return *o.Cap
}

// GetCapOk returns a tuple with the Cap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetCapOk() (*float32, bool) {
	if o == nil || common.IsNil(o.Cap) {
		return nil, false
	}
	return o.Cap, true
}

// HasCap returns a boolean if a field has been set.
func (o *MetricBehavior) HasCap() bool {
	if o != nil && !common.IsNil(o.Cap) {
		return true
	}

	return false
}

// SetCap gets a reference to the given float32 and assigns it to the Cap field.
func (o *MetricBehavior) SetCap(v float32) {
	o.Cap = &v
}

// GetCapping returns the Capping field value if set, zero value otherwise.
func (o *MetricBehavior) GetCapping() string {
	if o == nil || common.IsNil(o.Capping) {
		var ret string
		return ret
	}
	return *o.Capping
}

// GetCappingOk returns a tuple with the Capping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetCappingOk() (*string, bool) {
	if o == nil || common.IsNil(o.Capping) {
		return nil, false
	}
	return o.Capping, true
}

// HasCapping returns a boolean if a field has been set.
func (o *MetricBehavior) HasCapping() bool {
	if o != nil && !common.IsNil(o.Capping) {
		return true
	}

	return false
}

// SetCapping gets a reference to the given string and assigns it to the Capping field.
func (o *MetricBehavior) SetCapping(v string) {
	o.Capping = &v
}

// GetCapValue returns the CapValue field value if set, zero value otherwise.
func (o *MetricBehavior) GetCapValue() float32 {
	if o == nil || common.IsNil(o.CapValue) {
		var ret float32
		return ret
	}
	return *o.CapValue
}

// GetCapValueOk returns a tuple with the CapValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetCapValueOk() (*float32, bool) {
	if o == nil || common.IsNil(o.CapValue) {
		return nil, false
	}
	return o.CapValue, true
}

// HasCapValue returns a boolean if a field has been set.
func (o *MetricBehavior) HasCapValue() bool {
	if o != nil && !common.IsNil(o.CapValue) {
		return true
	}

	return false
}

// SetCapValue gets a reference to the given float32 and assigns it to the CapValue field.
func (o *MetricBehavior) SetCapValue(v float32) {
	o.CapValue = &v
}

// GetConversionWindowStart returns the ConversionWindowStart field value
func (o *MetricBehavior) GetConversionWindowStart() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ConversionWindowStart
}

// GetConversionWindowStartOk returns a tuple with the ConversionWindowStart field value
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetConversionWindowStartOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionWindowStart, true
}

// SetConversionWindowStart sets field value
func (o *MetricBehavior) SetConversionWindowStart(v float32) {
	o.ConversionWindowStart = v
}

// GetConversionWindowEnd returns the ConversionWindowEnd field value
func (o *MetricBehavior) GetConversionWindowEnd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ConversionWindowEnd
}

// GetConversionWindowEndOk returns a tuple with the ConversionWindowEnd field value
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetConversionWindowEndOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionWindowEnd, true
}

// SetConversionWindowEnd sets field value
func (o *MetricBehavior) SetConversionWindowEnd(v float32) {
	o.ConversionWindowEnd = v
}

// GetRiskThresholdSuccess returns the RiskThresholdSuccess field value
func (o *MetricBehavior) GetRiskThresholdSuccess() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RiskThresholdSuccess
}

// GetRiskThresholdSuccessOk returns a tuple with the RiskThresholdSuccess field value
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetRiskThresholdSuccessOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RiskThresholdSuccess, true
}

// SetRiskThresholdSuccess sets field value
func (o *MetricBehavior) SetRiskThresholdSuccess(v float32) {
	o.RiskThresholdSuccess = v
}

// GetRiskThresholdDanger returns the RiskThresholdDanger field value
func (o *MetricBehavior) GetRiskThresholdDanger() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RiskThresholdDanger
}

// GetRiskThresholdDangerOk returns a tuple with the RiskThresholdDanger field value
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetRiskThresholdDangerOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RiskThresholdDanger, true
}

// SetRiskThresholdDanger sets field value
func (o *MetricBehavior) SetRiskThresholdDanger(v float32) {
	o.RiskThresholdDanger = v
}

// GetMinPercentChange returns the MinPercentChange field value
func (o *MetricBehavior) GetMinPercentChange() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MinPercentChange
}

// GetMinPercentChangeOk returns a tuple with the MinPercentChange field value
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetMinPercentChangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinPercentChange, true
}

// SetMinPercentChange sets field value
func (o *MetricBehavior) SetMinPercentChange(v float32) {
	o.MinPercentChange = v
}

// GetMaxPercentChange returns the MaxPercentChange field value
func (o *MetricBehavior) GetMaxPercentChange() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MaxPercentChange
}

// GetMaxPercentChangeOk returns a tuple with the MaxPercentChange field value
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetMaxPercentChangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxPercentChange, true
}

// SetMaxPercentChange sets field value
func (o *MetricBehavior) SetMaxPercentChange(v float32) {
	o.MaxPercentChange = v
}

// GetMinSampleSize returns the MinSampleSize field value
func (o *MetricBehavior) GetMinSampleSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MinSampleSize
}

// GetMinSampleSizeOk returns a tuple with the MinSampleSize field value
// and a boolean to check if the value has been set.
func (o *MetricBehavior) GetMinSampleSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinSampleSize, true
}

// SetMinSampleSize sets field value
func (o *MetricBehavior) SetMinSampleSize(v float32) {
	o.MinSampleSize = v
}

func (o MetricBehavior) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricBehavior) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["goal"] = o.Goal
	if !common.IsNil(o.Cap) {
		toSerialize["cap"] = o.Cap
	}
	if !common.IsNil(o.Capping) {
		toSerialize["capping"] = o.Capping
	}
	if !common.IsNil(o.CapValue) {
		toSerialize["capValue"] = o.CapValue
	}
	toSerialize["conversionWindowStart"] = o.ConversionWindowStart
	toSerialize["conversionWindowEnd"] = o.ConversionWindowEnd
	toSerialize["riskThresholdSuccess"] = o.RiskThresholdSuccess
	toSerialize["riskThresholdDanger"] = o.RiskThresholdDanger
	toSerialize["minPercentChange"] = o.MinPercentChange
	toSerialize["maxPercentChange"] = o.MaxPercentChange
	toSerialize["minSampleSize"] = o.MinSampleSize
	return toSerialize, nil
}

func (o *MetricBehavior) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"goal",
		"conversionWindowStart",
		"conversionWindowEnd",
		"riskThresholdSuccess",
		"riskThresholdDanger",
		"minPercentChange",
		"maxPercentChange",
		"minSampleSize",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricBehavior := _MetricBehavior{}

	err = json.Unmarshal(bytes, &varMetricBehavior)

	if err != nil {
		return err
	}

	*o = MetricBehavior(varMetricBehavior)

	return err
}

type NullableMetricBehavior struct {
	value *MetricBehavior
	isSet bool
}

func (v NullableMetricBehavior) Get() *MetricBehavior {
	return v.value
}

func (v *NullableMetricBehavior) Set(val *MetricBehavior) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricBehavior) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricBehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricBehavior(val *MetricBehavior) *NullableMetricBehavior {
	return &NullableMetricBehavior{value: val, isSet: true}
}

func (v NullableMetricBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricBehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
